//Have to change Biases, will need to go through all const values below
//-Consider changing intro questions to auto generated by AI

#include <iostream>
#include <string>

#ifndef __AI_H__
#define __AI_H__

#include "Player.h"
#include "questionTable.h"
#include "biasInformation.h"

using namespace std;

/*---------------------------------------- VARIABLES ---------------------------------------*/
//Size of arrays
static const int NUM_CAT_ROWS = 6;          //Catagory = age, weight, sex, etc.
static const int MAX_BIAS_COLS = 4;         //Max # Sub Catagory = old, young, fat, fit, etc.

static const int MAX_QUESTIONS = 10;        //Max questions AI will ask user

static const int NUM_BIASES = 18;
static const int NUM_SUB_CAT = 12;          //NUM_BIASES - NUM_CAT_ROWS
static const int NUM_TOTAL_BIASES = 26;     //Total biases (includes single and double)
static const int NUM_Q_POSSIBILITIES = 324; //Number of possible combinations

//static const int NUM_QUESTIONS = 26;

/*-------------------------- VARIABLES THAT CAN AFFECT QUESTION ORDER ----------------------*/
//Values to accept past questions
static const double NEEDED_SUCCESS_RATE = 0.6;
static const double MIN_PEOPLE_NEEDED = 5;  //Double, but will never be x.x

/*For ease of seeing/using 2D bias array (Basically a tree)
 *To get to level 1 -> Go to [0][0]
 *To get to level 2 -> [i][0] and 0 <= i < NUM_BIAS_CAT
 *To get to levle 3 -> [i][j] and 0 <= i < NUM_BIAS_CAT; 1 < j < NUM_BIAS_SUB
 */
    //Level 1
static const int MORAL = 00;
static const int MORE = 01;

    //Level 2 (Main Catagories)
static const int AGE = 10;
static const int WEIGHT = 20;
static const int SEX = 30;
static const int LEGAL = 40;
static const int HEALTH = 50;

    //Level 3 (Sub Catagories)
static const int OLD = 11;
static const int MIDDLE = 12;
static const int YOUNG = 13;

static const int FAT = 21;
static const int FIT = 22;
static const int THIN = 23;

static const int MALE = 31;
static const int FEMALE = 32;

static const int SAMARITAN = 41;
static const int MURDERER = 42;

static const int HEALTHY = 51;
static const int SICK = 52;

/*-------------------------------------- QUESTION TABLE ------------------------------------*/
static const struct BIAS_INFORMATION biasInfo[NUM_BIASES*3] = {
    //Level 1
    00, "moral", "Morality",                //0

    //Level 2
    10, "age", "Age bias",                  //1
    //Level 3
    11, "old", "Old age bias",              //2
    12, "middle", "Middle age bias",        //3
    13, "young", "Young age bias",          //4
    
    //Level 2
    20, "weight", "Weight bias",            //5
    //Level 3
    21, "fat", "Fat bias",                  //6
    22, "fit", "Fit bias",                  //7
    23, "thin", "Thin bias",                //8
    
    //Level 2
    30, "sex", "Sex bias",                  //9
    //Level 3
    31, "male", "Male bias",                //10
    32, "female", "Female bias",            //11
    
    //Level 2
    40, "legal", "Legal bias",              //12
    //Level 3
    41, "samaritan", "Good samaritan bias", //13
    42, "murderer", "Murderer bias",        //14
   
    //Level 2
    50, "health", "Health bias",            //15
    //Level 3
    51, "healthy", "Healthy bias",          //16
    52, "sick", "Sick bias"                 //17
};

/*-------------------------------------- QUESTION TABLE ------------------------------------*/
static const struct QUESTION_TABLE questions[NUM_TOTAL_BIASES*2] = {
/* SINGLE */
    0, "a person ",
    
    //AGE SINGLE
    11, "1 old person",
    12, "1 middle aged person",
    13, "1 child",
   
    //WEIGHT SINGLE
    21, "1 fat person",
    22, "1 fit person",
    23, "1 thin person",
   
    //SEX SINGLE
    31, "1 man",
    32, "1 woman",
   
    //LEGAL SINGLE
    41, "1 good samaritan",
    42, "1 criminal",
    
    //HEALTH SINGLE
    51, "1 healthy person",
    52, "1 very sick person",
    
/* MULTIPLE */
    01, "2 people",
    
    //AGE MULTIPLE
    101, "2 old people",
    102, "2 middle aged people",
    103, "2 children",
    
    //WEIGHT MULTIPLE
    201, "2 fat people",
    202, "2 fit people",
    203, "2 thin people",

    //SEX MULTIPLE
    301, "2 men",
    302, "2 women",
    
    //LEGAL MULTIPLE
    401, "2 good samaritans",
    402, "2 criminals",
    
    //HEALTH MULTIPLE
    501, "2 healthy people",
    502, "2 very sick people"
};


/*--------------------------------- ACTUAL CLASS DECLARATION -------------------------------*/
class AI{
private:
    
    Player player;
    
    /* Biases (0 <= x <= 1) 0 is unbiased
     * First value in row is general bias (Ex. AgeBias = 0.5)
     * Next values are more specific biases
     * Value of -1 means no bias/placeholder
     *
     * Value of 0.0 is nonbiased, 0.5 is neutral, and 1.0 is biased
     *
     * Row 0: Morals (0 good -> 1 evil) aka good = more saved
     * Row 1: Age, young, middle, old
     * Row 2: Weight, fat, thin, fit
     * Row 3: Sex, male, female
     * Row 4: Legal, Samaritan, Murderer
     * Row 5: Health, Healthy, Sick
     */
    double biases[NUM_CAT_ROWS][MAX_BIAS_COLS];
    double initialBiases[NUM_CAT_ROWS][MAX_BIAS_COLS];
    
    /* Keep track of quesitons asked, don't ask again
     * First Value is continue, second value is swerve
     * CHANGES:
     *  -Could have effiency of question (need more input for use)
     */
    int askedList[MAX_QUESTIONS*2];
    int askedIndex;
    
    //Which option was picked repectivily
    int pickedList[MAX_QUESTIONS];
    int pickedIndex;
    
    //Use to keep track of success rate questions asked
    int successRateIndex;
    
    //Used to find next choices
    double domBias;
    double leastBiased;
    
    //Which choice that was picked
    int continueChoice;
    int swerveChoice;
    
    //Did they select a or b?
    int biasPicked; //Return what they picked
    int notPicked;  //Return what wasn't picked
    
    //i = Num Possibilites
    //j = (Continue, swerve, numPeople, efficiency (perecntage that picked b)
    double previousBiasInfo[NUM_Q_POSSIBILITIES][4];
    
    //All questions have been asked, reask questions
    bool overRide;
    bool waitOverRide;
    
    int tempSwerve;
    int tempContinue;
    
    //Wait this long until we ask 1 vs 2 or 2 vs 1 questions
    int waitFor;
    
    //If true, go to first pick questions
    bool pickFirstFlag;
    
public:
    //Constructor
    AI();
    
    //Sets all used biases places to neutral
    void setToNeutral();
    
    //Loads any available information
    void loadPreviousBiases();
    
    //Saves the bias informatino to .txt file
    void saveBiasInformation();
    
    //Sorts biases by most likley to pick
    void sortBiases();
    
    //Getters
    Player getPlayer();
    
    //Setters
    void setPlayer(Player player);

    //Sets choices (for intial questions)
    void setContinueChoice(int continueChoice);
    void setSwerveChoice(int swerveChoice);
    
    //Set main/sub catagories
    void setAgeBias(string userIn);
    void setWeightBias(string userIn);
    void setSexBias(string userIn);
    void setLegalBias(string userIn);
    void setHealthBias(string userIn);
    
    //Set moral biases
    void setMorals(string userIn);

    //Updates Biases
    void updateBiases(string userIn);
    
    //Check if bias passes 0.0 or 1.0
    void checkBiasBounds();
    
    //Ensures that questions aren't repeated if possible
    bool repeatCheck();
    
    //Find which option the user chose
    void biasChosen(string userIn);
    
    //Record the value answered
    void recordAnswer(string userIn);
    
    //Resets any variables that can affect choices
    void resetVariables();
    
    //Find options for direction
    bool pickFirst();   //Use success rates > 50% first (return false if move to pickChoices)
    void pickChoices();
    
    //Save information
    void saveBiases();
    
    //Print functions
    void printContinue();
    void printSwerve();
    void printCurrentResults();
    void printResults();
};

#endif
